name: 'Python auto-release (PyPI & GitHub)'
author: 'Conchylicultor'
description: 'Auto-detect version increase, build and publish PyPI, tag and release on GitHub, parse `CHANGELOG.md`.'
branding:
  icon: upload-cloud
  color: orange

inputs:
  pypi-token:
    description: 'Token of the PyPI account publishing the project. If missing, PyPI release is skipped.'
    required: false
    default: 'skip'  # Use sentinel value to error if user forgot to set the GitHub secret
  gh-token:
    description: 'Github action token. If missing, GitHub release is skipped.'
    required: false
  parse-changelog:
    description: 'Parse the `CHANGELOG.md` (`keep a changelog`
 format).'
    required: false
    default: false
  pkg-name:
    description: 'Name of the PyPI package (optional).'
    required: false
  path:
    description: 'Root directory of the project (containing the `pyproject.toml`).'
    default: '.'
    required: false
  git-ref:
    description: 'Git ref (e.g. SHA or tag) (optional).'
    required: false
    default: ''  # Use 'skip' to skip repository checkout

outputs:
  version:
    description: "Local project version detected (e.g. `'1.0.0'`)"
    value: ${{ steps.compare-version.outputs.version }}
  is-released:
    description: "Whether a new release was triggered (`'true'` / `'false'`)"
    value: ${{ steps.compare-version.outputs.should-release }}

runs:
  using: "composite"
  steps:
    - if: inputs.git-ref != 'skip'
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.git-ref }}

    # Setup Python
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
  
    - run: pip install -e .
      shell: bash
      working-directory: ${{ inputs.path }}
  
    - run: pip install packaging
      shell: bash
      working-directory: ${{ inputs.path }}

    # Get the local and PyPI versions
    # Check if local `__version__` < pip version
    # Output: `compare-version.outputs.should-release`
    - id: compare-version
      run: |
        python ${{github.action_path}}/src/compare_version.py \
          --pkg_name="${{ inputs.pkg-name }}" \
          --pypi_pkg_name="${{ inputs.pypi_pkg_name }}"
      shell: bash
      working-directory: ${{ inputs.path }}

    - run: |
        echo version=${{ steps.compare-version.outputs.version }}
        echo should-release=${{ steps.compare-version.outputs.should-release }}
      shell: bash
      working-directory: ${{ inputs.path }}

    # TODO(epot):
    # * Could hardcode the version
    # * Could auto-detect changelog and format ?
    # Parse changelog before, so if there's failure, we don't end up
    # in a bad state where PyPI is published but not GitHub
    - if: |
        inputs.parse-changelog == 'true'
        && steps.compare-version.outputs.should-release == 'true'
      id: changelog
      uses: mindsers/changelog-reader-action@v2
      with:
        path: ${{ inputs.path }}/CHANGELOG.md

    # Publish the package (if local `__version__` < pip version)
    - if: |
        inputs.pypi-token != 'skip'
        && steps.compare-version.outputs.should-release == 'true'
      uses: etils-actions/pypi-build-publish@v1
      with:
        pypi-token: ${{ inputs.pypi-token }}
        path: ${{ inputs.path }}

    # Use env indirection to support multi-lines variable
    - if: steps.compare-version.outputs.should-release == 'true'
      run: |
        echo "release-body=$RELEASE_BODY"
      env:
        RELEASE_BODY: ${{ steps.changelog.outputs.changes }}
      shell: bash

    - if: |
        inputs.gh-token
        && steps.compare-version.outputs.should-release == 'true'
      uses: ncipollo/release-action@v1
      with:
        commit: ${{ github.sha }}
        tag: v${{ steps.compare-version.outputs.version }}
        token: ${{ inputs.gh-token }}
        body: ${{ steps.changelog.outputs.changes }}
